{
  "env": {
    "browser": true,
    "es2021": true,
    "react-native/react-native": true
  },
  "plugins": [
    "react-hooks",
    "react",
    "react-native",
    "eslint-plugin-no-inline-styles",
    "@typescript-eslint"
  ],
  "extends": [
    "plugin:promise/recommended",
    "standard",
    "standard-jsx",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/eslint-recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module",
    "useJSXTextNode": false
  },
  "rules": {
    "react-native/no-unused-styles": 2,
    "react-native/split-platform-components": 2,
    "react-native/no-color-literals": 1,
    "react-native/no-single-element-style-arrays": 2,
    "promise/always-return": "off",
    "promise/catch-or-return": "off",
    "multiline-ternary": "off",
    "indent": "off",
    "react/jsx-curly-newline": "off",
    "react/jsx-indent": "off",
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": ["const", "let", "var"], "next": "*" },
      {
        "blankLine": "any",
        "prev": ["const", "let", "var"],
        "next": ["const", "let", "var"]
      }
    ],
    "prefer-const": [
      "error",
      {
        "destructuring": "any",
        "ignoreReadBeforeAssign": false
      }
    ],
    "id-length": ["error", { "properties": "never", "exceptions": ["e", "_"] }],
    "quotes": [
      "error",
      "single",
      { "avoidEscape": true, "allowTemplateLiterals": true }
    ],
    "no-else-return": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/jsx-fragments": ["error", "syntax"],
    "react/jsx-handler-names": ["off"],
    "react/jsx-closing-bracket-location": ["error", "line-aligned"],
    "react/jsx-no-target-blank": ["warn", { "allowReferrer": true }],
    "react/no-multi-comp": ["error", { "ignoreStateless": true }],
    "react/sort-comp": [
      "error",
      {
        "order": [
          "static-methods",
          "instance-variables",
          "lifecycle",
          "getters",
          "setters",
          "/^on.+$/",
          "/^handle.+$/",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "instance-methods",
          "everything-else",
          "rendering"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "getInitialState",
            "state",
            "getChildContext",
            "componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "componentDidUpdate",
            "componentWillUnmount"
          ],
          "rendering": ["/^render.+$/", "render"]
        }
      }
    ],
    "react/jsx-props-no-spreading": "off",
    "react/no-array-index-key": "error",
    "import/order": [
      "error",
      {
        "groups": [
          ["builtin", "external"],
          "internal",
          ["parent", "sibling", "index", "unknown"]
        ],
        "pathGroups": [
          {
            "pattern": "~/**",
            "group": "unknown"
          }
        ],
        "newlines-between": "always"
      }
    ],
    "import/no-extraneous-dependencies": "warn",
    "@typescript-eslint/array-type": ["error", { "default": "array" }],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/method-signature-style": "warn",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/no-var-requires": "off",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": ["error"],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/member-delimiter-style": "off",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["warn"],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "camelcase": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      { "selector": "property", "format": null }
    ],
    "no-unused-vars": ["error", { "args": "after-used" }],
    "@typescript-eslint/no-unused-vars": ["error", { "args": "after-used" }],
    "no-unused-expressions": "off",
    "@typescript-eslint/no-unused-expressions": ["error"],
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "extendDefaults": true,
        "types": {
          "{}": false,
          "Function": false,
          "object": false
        }
      }
    ],
    "complexity": ["warn", { "max": 10 }],
    "max-params": ["warn", 3],
    "max-statements": ["warn", 20],
    "max-statements-per-line": ["warn", { "max": 1 }],
    "max-nested-callbacks": ["warn", { "max": 3 }],
    "max-depth": ["warn", { "max": 3 }],
    "max-lines": [
      "error",
      {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-lines-per-function": [
      "warn",
      {
        "max": 200,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "no-param-reassign": "warn",
    "no-invalid-this": "warn",
    "func-style": ["error", "expression"],
    "no-inline-styles/no-inline-styles": "warn",
    "curly": ["error", "all"]
  },
  "globals": {
    "localStorage": true,
    "fetch": true,
    "Event": true
  }
}
